"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[2167],{75631:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return g}});var t=r(3289);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=l(r),g=i,f=d["".concat(s,".").concat(g)]||d[g]||c[g]||o;return r?t.createElement(f,a(a({ref:n},p),{},{components:r})):t.createElement(f,a({ref:n},p))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var l=2;l<o;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},76704:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var t=r(69432),i=r(58703),o=(r(3289),r(75631)),a=["components"],u={id:"merge-users-input",title:"MergeUsersInput"},s=void 0,l={unversionedId:"graphql/inputs/merge-users-input",id:"graphql/inputs/merge-users-input",title:"MergeUsersInput",description:"Autogenerated input type of MergeUsers",source:"@site/docs/graphql/inputs/merge-users-input.mdx",sourceDirName:"graphql/inputs",slug:"/graphql/inputs/merge-users-input",permalink:"/docs/graphql/inputs/merge-users-input",editUrl:"https://github.com/neinteractiveliterature/intercode/edit/main/doc-site/docs/graphql/inputs/merge-users-input.mdx",tags:[],version:"current",frontMatter:{id:"merge-users-input",title:"MergeUsersInput"},sidebar:"sidebar",previous:{title:"MarkOrderPaidInput",permalink:"/docs/graphql/inputs/mark-order-paid-input"},next:{title:"MoneyInput",permalink:"/docs/graphql/inputs/money-input"}},p=[{value:"Fields",id:"fields",children:[{value:"<code>clientMutationId</code> (String)",id:"clientmutationid-string",children:[],level:4},{value:"<code>userIds</code> (ID)",id:"userids-id",children:[],level:4},{value:"<code>winningUserConProfiles</code> (WinningUserConProfileInput)",id:"winninguserconprofiles-winninguserconprofileinput",children:[],level:4},{value:"<code>winningUserId</code> (ID)",id:"winninguserid-id",children:[],level:4}],level:3}],c={toc:p};function d(e){var n=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Autogenerated input type of MergeUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type MergeUsersInput {\n  clientMutationId: String\n  userIds: [ID!]\n  winningUserConProfiles: [WinningUserConProfileInput!]!\n  winningUserId: ID\n}\n")),(0,o.kt)("h3",{id:"fields"},"Fields"),(0,o.kt)("h4",{id:"clientmutationid-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"clientMutationId")," (",(0,o.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,o.kt)("inlineCode",{parentName:"a"},"String")),")"),(0,o.kt)("p",null,"A unique identifier for the client performing the mutation."),(0,o.kt)("h4",{id:"userids-id"},(0,o.kt)("inlineCode",{parentName:"h4"},"userIds")," (",(0,o.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/id"},(0,o.kt)("inlineCode",{parentName:"a"},"ID")),")"),(0,o.kt)("p",null,"The user IDs to merge."),(0,o.kt)("h4",{id:"winninguserconprofiles-winninguserconprofileinput"},(0,o.kt)("inlineCode",{parentName:"h4"},"winningUserConProfiles")," (",(0,o.kt)("a",{parentName:"h4",href:"/docs/graphql/inputs/winning-user-con-profile-input"},(0,o.kt)("inlineCode",{parentName:"a"},"WinningUserConProfileInput")),")"),(0,o.kt)("h4",{id:"winninguserid-id"},(0,o.kt)("inlineCode",{parentName:"h4"},"winningUserId")," (",(0,o.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/id"},(0,o.kt)("inlineCode",{parentName:"a"},"ID")),")"))}d.isMDXComponent=!0}}]);