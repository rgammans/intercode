"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[48832],{75631:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return m}});var n=t(3289);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},s=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(f,o(o({ref:r},s),{},{components:t})):n.createElement(f,o({ref:r},s))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},29603:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var n=t(88078),i=t(65844),a=(t(3289),t(75631)),o=["components"],c={id:"preview-markdown",title:"previewMarkdown"},p=void 0,l={unversionedId:"graphql/queries/preview-markdown",id:"graphql/queries/preview-markdown",isDocsHomePage:!1,title:"previewMarkdown",description:"DEPRECATED: Domain-specific queries are being deprecated. Please use the previewMarkdown field on the CmsParent interface instead.",source:"@site/docs/graphql/queries/preview-markdown.mdx",sourceDirName:"graphql/queries",slug:"/graphql/queries/preview-markdown",permalink:"/docs/graphql/queries/preview-markdown",editUrl:"https://github.com/neinteractiveliterature/intercode/edit/main/doc-site/docs/graphql/queries/preview-markdown.mdx",tags:[],version:"current",frontMatter:{id:"preview-markdown",title:"previewMarkdown"},sidebar:"sidebar",previous:{title:"previewLiquid",permalink:"/docs/graphql/queries/preview-liquid"},next:{title:"previewNotifierLiquid",permalink:"/docs/graphql/queries/preview-notifier-liquid"}},s=[{value:"Arguments",id:"arguments",children:[{value:"<code>markdown</code> (String!)",id:"markdown-string",children:[],level:4}],level:3},{value:"Type",id:"type",children:[{value:"String",id:"string",children:[],level:4}],level:3}],u={toc:s};function d(e){var r=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("span",{class:"badge badge--warning"},"DEPRECATED: Domain-specific queries are being deprecated. Please use the `previewMarkdown` field on the CmsParent interface instead."),(0,a.kt)("p",null,"Given a Markdown text string, renders it to HTML using the current domain's CMS context\nand returns the result."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"previewMarkdown(\n  markdown: String!\n): String!\n\n")),(0,a.kt)("h3",{id:"arguments"},"Arguments"),(0,a.kt)("h4",{id:"markdown-string"},(0,a.kt)("inlineCode",{parentName:"h4"},"markdown")," (",(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,a.kt)("inlineCode",{parentName:"a"},"String!")),")"),(0,a.kt)("p",null,"The Markdown content to render."),(0,a.kt)("h3",{id:"type"},"Type"),(0,a.kt)("h4",{id:"string"},(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,a.kt)("inlineCode",{parentName:"a"},"String"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."))}d.isMDXComponent=!0}}]);