"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[77646],{75631:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(3289);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(r),f=i,g=d["".concat(l,".").concat(f)]||d[f]||s[f]||o;return r?n.createElement(g,a(a({ref:t},u),{},{components:r})):n.createElement(g,a({ref:t},u))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},98525:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var n=r(88078),i=r(65844),o=(r(3289),r(75631)),a=["components"],c={id:"preview-notifier-liquid",title:"previewNotifierLiquid"},l=void 0,p={unversionedId:"graphql/queries/preview-notifier-liquid",id:"graphql/queries/preview-notifier-liquid",isDocsHomePage:!1,title:"previewNotifierLiquid",description:"DEPRECATED: Domain-specific queries are being deprecated. Please use the previewnotifierliquid field on the Convention type instead.",source:"@site/docs/graphql/queries/preview-notifier-liquid.mdx",sourceDirName:"graphql/queries",slug:"/graphql/queries/preview-notifier-liquid",permalink:"/docs/graphql/queries/preview-notifier-liquid",editUrl:"https://github.com/neinteractiveliterature/intercode/edit/main/doc-site/docs/graphql/queries/preview-notifier-liquid.mdx",tags:[],version:"current",frontMatter:{id:"preview-notifier-liquid",title:"previewNotifierLiquid"},sidebar:"sidebar",previous:{title:"previewMarkdown",permalink:"/docs/graphql/queries/preview-markdown"},next:{title:"product",permalink:"/docs/graphql/queries/product"}},u=[{value:"Arguments",id:"arguments",children:[{value:"<code>content</code> (String!)",id:"content-string",children:[],level:4},{value:"<code>eventKey</code> (String!)",id:"eventkey-string",children:[],level:4}],level:3},{value:"Type",id:"type",children:[{value:"String",id:"string",children:[],level:4}],level:3}],s={toc:u};function d(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("span",{class:"badge badge--warning"},"DEPRECATED: Domain-specific queries are being deprecated. Please use the `preview_notifier_liquid` field on the Convention type instead."),(0,o.kt)("p",null,"Given a Liquid text string and a notification event, renders the Liquid to HTML using the\ncurrent domain's CMS context as if it were the content for that notification type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"previewNotifierLiquid(\n  content: String!\n  eventKey: String!\n): String!\n\n")),(0,o.kt)("h3",{id:"arguments"},"Arguments"),(0,o.kt)("h4",{id:"content-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"content")," (",(0,o.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,o.kt)("inlineCode",{parentName:"a"},"String!")),")"),(0,o.kt)("p",null,"The Liquid content to render."),(0,o.kt)("h4",{id:"eventkey-string"},(0,o.kt)("inlineCode",{parentName:"h4"},"eventKey")," (",(0,o.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,o.kt)("inlineCode",{parentName:"a"},"String!")),")"),(0,o.kt)("p",null,"The key of the notification event to use for generating the preview."),(0,o.kt)("h3",{id:"type"},"Type"),(0,o.kt)("h4",{id:"string"},(0,o.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,o.kt)("inlineCode",{parentName:"a"},"String"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."))}d.isMDXComponent=!0}}]);