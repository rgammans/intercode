"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[2167],{75631:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(3289);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),g=i,f=c["".concat(l,".").concat(g)]||c[g]||d[g]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},22192:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var r=t(88078),i=t(65844),a=(t(3289),t(75631)),o=["components"],s={id:"merge-users-input",title:"MergeUsersInput"},l=void 0,u={unversionedId:"graphql/inputs/merge-users-input",id:"graphql/inputs/merge-users-input",isDocsHomePage:!1,title:"MergeUsersInput",description:"Autogenerated input type of MergeUsers",source:"@site/docs/graphql/inputs/merge-users-input.mdx",sourceDirName:"graphql/inputs",slug:"/graphql/inputs/merge-users-input",permalink:"/docs/graphql/inputs/merge-users-input",editUrl:"https://github.com/neinteractiveliterature/intercode/edit/main/doc-site/docs/graphql/inputs/merge-users-input.mdx",tags:[],version:"current",frontMatter:{id:"merge-users-input",title:"MergeUsersInput"},sidebar:"sidebar",previous:{title:"MarkOrderPaidInput",permalink:"/docs/graphql/inputs/mark-order-paid-input"},next:{title:"MoneyInput",permalink:"/docs/graphql/inputs/money-input"}},p=[{value:"Fields",id:"fields",children:[{value:"<code>clientMutationId</code> (String)",id:"clientmutationid-string",children:[],level:4},{value:"<code>transitionalUserIds</code> ([ID!])",id:"transitionaluserids-id",children:[],level:4},{value:"<code>transitionalWinningUserId</code> (ID)",id:"transitionalwinninguserid-id",children:[],level:4},{value:"<code>userIds</code> ([Int!])",id:"userids-int",children:[],level:4},{value:"<code>winningUserConProfiles</code> ([WinningUserConProfileInput!]!)",id:"winninguserconprofiles-winninguserconprofileinput",children:[],level:4},{value:"<code>winningUserId</code> (Int)",id:"winninguserid-int",children:[],level:4}],level:3}],d={toc:p};function c(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Autogenerated input type of MergeUsers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"type MergeUsersInput {\n  clientMutationId: String\n  transitionalUserIds: [ID!]\n  transitionalWinningUserId: ID\n  userIds: [Int!]\n  winningUserConProfiles: [WinningUserConProfileInput!]!\n  winningUserId: Int\n}\n")),(0,a.kt)("h3",{id:"fields"},"Fields"),(0,a.kt)("h4",{id:"clientmutationid-string"},(0,a.kt)("inlineCode",{parentName:"h4"},"clientMutationId")," (",(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,a.kt)("inlineCode",{parentName:"a"},"String")),")"),(0,a.kt)("p",null,"A unique identifier for the client performing the mutation."),(0,a.kt)("h4",{id:"transitionaluserids-id"},(0,a.kt)("inlineCode",{parentName:"h4"},"transitionalUserIds")," (",(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/id"},(0,a.kt)("inlineCode",{parentName:"a"},"[ID!]")),")"),(0,a.kt)("p",null,"The user IDs to merge."),(0,a.kt)("h4",{id:"transitionalwinninguserid-id"},(0,a.kt)("inlineCode",{parentName:"h4"},"transitionalWinningUserId")," (",(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/id"},(0,a.kt)("inlineCode",{parentName:"a"},"ID")),")"),(0,a.kt)("h4",{id:"userids-int"},(0,a.kt)("inlineCode",{parentName:"h4"},"userIds")," (",(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/int"},(0,a.kt)("inlineCode",{parentName:"a"},"[Int!]")),")"),(0,a.kt)("h4",{id:"winninguserconprofiles-winninguserconprofileinput"},(0,a.kt)("inlineCode",{parentName:"h4"},"winningUserConProfiles")," (",(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/inputs/winning-user-con-profile-input"},(0,a.kt)("inlineCode",{parentName:"a"},"[WinningUserConProfileInput!]!")),")"),(0,a.kt)("h4",{id:"winninguserid-int"},(0,a.kt)("inlineCode",{parentName:"h4"},"winningUserId")," (",(0,a.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/int"},(0,a.kt)("inlineCode",{parentName:"a"},"Int")),")"))}c.isMDXComponent=!0}}]);